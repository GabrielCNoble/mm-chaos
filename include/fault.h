#ifndef FAULT_H
#define FAULT_H

#include "ultra64.h"
#include "attributes.h"

#include "stdarg.h"
#include "stdint.h"

#include "padmgr.h"
#include "stack.h"
#include "unk.h"

// These are the same as the 3-bit ansi color codes
#define FAULT_COLOR_BLACK      0
#define FAULT_COLOR_RED        1
#define FAULT_COLOR_GREEN      2
#define FAULT_COLOR_YELLOW     3
#define FAULT_COLOR_BLUE       4
#define FAULT_COLOR_MAGENTA    5
#define FAULT_COLOR_CYAN       6
#define FAULT_COLOR_WHITE      7
// Additional color codes
#define FAULT_COLOR_DARK_GRAY  8
#define FAULT_COLOR_LIGHT_GRAY 9

#define FAULT_COLOR_STRINGIFY(s) #s
#define FAULT_COLOR_EXPAND_AND_STRINGIFY(s) FAULT_COLOR_STRINGIFY(s)

#define FAULT_ESC '\x1A'
#define FAULT_COLOR(n) "\x1A" FAULT_COLOR_EXPAND_AND_STRINGIFY(FAULT_COLOR_ ## n)


// Address at the end of "non-expansion" memory space
#define FAULT_FB_ADDRESS (void*)((PHYS_TO_K0(0x400000) - SCREEN_HEIGHT * SCREEN_WIDTH * sizeof(u16)))

#define FAULT_INST_OPCODE_MASK   0x0000003f
#define FAULT_INST_OPCODE_SHIFT  26

#define FAULT_INST_SPECIAL_MASK  0x0000003f
#define FAULT_INST_SPECIAL_SHIFT 24

#define FAULT_INST_REGIMM_MASK   0x0000001f
#define FAULT_INST_REGIMM_SHIFT  16

#define FAULT_INST_COPZRS_MASK   0x0000001f
#define FAULT_INST_COPZRS_SHIFT  21

#define FAULT_INST_COPZRT_MASK   0x0000001f
#define FAULT_INST_COPZRT_SHIFT  16
#define FAULT_INST_CO_FLAG       0x03000000

#define FAULT_INST_CP0_MASK      0x0000003f
#define FAULT_INST_CP0_SHIFT     24

#define FAULT_INST_TARGET_GET_TARGET(instruction)           (((instruction) & 0x3ffffff) << 2)

#define FAULT_INST_RS_RT_IMM_GET_RS(instruction)            (((instruction) >> 21) & 0x1f)
#define FAULT_INST_RS_RT_IMM_GET_RT(instruction)            (((instruction) >> 16) & 0x1f)
#define FAULT_INST_RS_RT_IMM_GET_IMM(instruction)           ((instruction) & 0xffff)

#define FAULT_INST_RS_RT_RD_SA_GET_RS(instruction)          (((instruction) >> 21) & 0x1f)
#define FAULT_INST_RS_RT_RD_SA_GET_RT(instruction)          (((instruction) >> 16) & 0x1f)
#define FAULT_INST_RS_RT_RD_SA_GET_RD(instruction)          (((instruction) >> 11) & 0x1f)
#define FAULT_INST_RS_RT_RD_SA_GET_SA(instruction)          (((instruction) >> 6) & 0x1f)

#define FAULT_INST_BASE_RT_OFFSET_GET_BASE(instruction)     (((instruction) >> 21) & 0x1f)
#define FAULT_INST_BASE_RT_OFFSET_GET_RT(instruction)       (((instruction) >> 16) & 0x1f)
#define FAULT_INST_BASE_RT_OFFSET_GET_OFFSET(instruction)   ((instruction)  & 0xffff)

enum FAULT_INST_OPCODES
{
    FAULT_INST_OPCODE_SPECIAL = 0,
    FAULT_INST_OPCODE_REGIMM,
    FAULT_INST_OPCODE_J,
    FAULT_INST_OPCODE_JAL,
    FAULT_INST_OPCODE_BEQ,
    FAULT_INST_OPCODE_BNE,
    FAULT_INST_OPCODE_BLEZ,
    FAULT_INST_OPCODE_BGTZ,
    FAULT_INST_OPCODE_ADDI,
    FAULT_INST_OPCODE_ADDIU,
    FAULT_INST_OPCODE_SLTI,
    FAULT_INST_OPCODE_SLTIU,
    FAULT_INST_OPCODE_ANDI,
    FAULT_INST_OPCODE_ORI,
    FAULT_INST_OPCODE_XORI,
    FAULT_INST_OPCODE_LUI,
    FAULT_INST_OPCODE_COP0,
    FAULT_INST_OPCODE_COP1,
    FAULT_INST_OPCODE_COP2,
    FAULT_INST_OPCODE_RESERVED0,
    FAULT_INST_OPCODE_BEQL,
    FAULT_INST_OPCODE_BNEL,
    FAULT_INST_OPCODE_BLEZL,
    FAULT_INST_OPCODE_BGTZL,
    FAULT_INST_OPCODE_DADDI,
    FAULT_INST_OPCODE_DADDIU,
    FAULT_INST_OPCODE_LDL,
    FAULT_INST_OPCODE_LDR,
    FAULT_INST_OPCODE_RESERVED1,
    FAULT_INST_OPCODE_RESERVED2,
    FAULT_INST_OPCODE_RESERVED3,
    FAULT_INST_OPCODE_RESERVED4,
    FAULT_INST_OPCODE_LB,
    FAULT_INST_OPCODE_LH,
    FAULT_INST_OPCODE_LWL,
    FAULT_INST_OPCODE_LW,
    FAULT_INST_OPCODE_LBU,
    FAULT_INST_OPCODE_LHU,
    FAULT_INST_OPCODE_LWR,
    FAULT_INST_OPCODE_LWU,
    FAULT_INST_OPCODE_SB,
    FAULT_INST_OPCODE_SH,
    FAULT_INST_OPCODE_SWL,
    FAULT_INST_OPCODE_SW,
    FAULT_INST_OPCODE_SDL,
    FAULT_INST_OPCODE_SDR,
    FAULT_INST_OPCODE_SWR,
    FAULT_INST_OPCODE_CACHE,
    FAULT_INST_OPCODE_LL,
    FAULT_INST_OPCODE_LWC1,
    FAULT_INST_OPCODE_LWC2,
    FAULT_INST_OPCODE_RESERVED5,
    FAULT_INST_OPCODE_LLD,
    FAULT_INST_OPCODE_LDC1,
    FAULT_INST_OPCODE_LDC2,
    FAULT_INST_OPCODE_LD,
    FAULT_INST_OPCODE_SC,
    FAULT_INST_OPCODE_SWC1,
    FAULT_INST_OPCODE_SWC2,
    FAULT_INST_OPCODE_RESERVED6,
    FAULT_INST_OPCODE_SCD,
    FAULT_INST_OPCODE_SDC1,
    FAULT_INST_OPCODE_SDC2,
    FAULT_INST_OPCODE_SD
};

enum FAULT_INST_SPECIALS
{
    FAULT_INST_SPECIAL_SLL,
    FAULT_INST_SPECIAL_RESERVED0,
    FAULT_INST_SPECIAL_SRL,
    FAULT_INST_SPECIAL_SRA,
    FAULT_INST_SPECIAL_SLLV,
    FAULT_INST_SPECIAL_RESERVED1,
    FAULT_INST_SPECIAL_SRLV,
    FAULT_INST_SPECIAL_SRAV,
    FAULT_INST_SPECIAL_JR,
    FAULT_INST_SPECIAL_JALR,
    FAULT_INST_SPECIAL_RESERVED2,
    FAULT_INST_SPECIAL_RESERVED3,
    FAULT_INST_SPECIAL_SYSCALL,
    FAULT_INST_SPECIAL_BREAK,
    FAULT_INST_SPECIAL_RESERVED4,
    FAULT_INST_SPECIAL_SYNC,
    FAULT_INST_SPECIAL_MFHI,
    FAULT_INST_SPECIAL_MTHI,
    FAULT_INST_SPECIAL_MFLO,
    FAULT_INST_SPECIAL_MTLO,
    FAULT_INST_SPECIAL_DSLLV,
    FAULT_INST_SPECIAL_RESERVED5,
    FAULT_INST_SPECIAL_DSRLV,
    FAULT_INST_SPECIAL_DSRAV,
    FAULT_INST_SPECIAL_MULT,
    FAULT_INST_SPECIAL_MULTU,
    FAULT_INST_SPECIAL_DIV,
    FAULT_INST_SPECIAL_DIVU,
    FAULT_INST_SPECIAL_DMULT,
    FAULT_INST_SPECIAL_DMULTU,
    FAULT_INST_SPECIAL_DDIV,
    FAULT_INST_SPECIAL_DDIVU,
    FAULT_INST_SPECIAL_ADD,
    FAULT_INST_SPECIAL_ADDU,
    FAULT_INST_SPECIAL_SUB,
    FAULT_INST_SPECIAL_SUBU,
    FAULT_INST_SPECIAL_AND,
    FAULT_INST_SPECIAL_OR,
    FAULT_INST_SPECIAL_XOR,
    FAULT_INST_SPECIAL_NOR,
    FAULT_INST_SPECIAL_RESERVED6,
    FAULT_INST_SPECIAL_RESERVED7,
    FAULT_INST_SPECIAL_SLT,
    FAULT_INST_SPECIAL_SLTU,
    FAULT_INST_SPECIAL_DADD,
    FAULT_INST_SPECIAL_DADDU,
    FAULT_INST_SPECIAL_DSUB,
    FAULT_INST_SPECIAL_DSUBU,
    FAULT_INST_SPECIAL_TGE,
    FAULT_INST_SPECIAL_TGEU,
    FAULT_INST_SPECIAL_TLT,
    FAULT_INST_SPECIAL_TLTU,
    FAULT_INST_SPECIAL_TEQ,
    FAULT_INST_SPECIAL_RESERVED8,
    FAULT_INST_SPECIAL_TNE,
    FAULT_INST_SPECIAL_RESERVED9,
    FAULT_INST_SPECIAL_DSLL,
    FAULT_INST_SPECIAL_RESERVED10,
    FAULT_INST_SPECIAL_DSRL,
    FAULT_INST_SPECIAL_DSRA,
    FAULT_INST_SPECIAL_DSLL32,
    FAULT_INST_SPECIAL_RESERVED11,
    FAULT_INST_SPECIAL_DSRL32,
    FAULT_INST_SPECIAL_DSRA32
};

enum FAULT_INST_REGIMMS
{
    FAULT_INST_REGIMMS_BLTZ,
    FAULT_INST_REGIMMS_BGEZ,
    FAULT_INST_REGIMMS_BLTZL,
    FAULT_INST_REGIMMS_BGEZL,
    FAULT_INST_REGIMMS_RESERVED0,
    FAULT_INST_REGIMMS_RESERVED1,
    FAULT_INST_REGIMMS_RESERVED2,
    FAULT_INST_REGIMMS_RESERVED3,
    FAULT_INST_REGIMMS_TGEI,
    FAULT_INST_REGIMMS_TGEIU,
    FAULT_INST_REGIMMS_TLTI,
    FAULT_INST_REGIMMS_TLTIU,
    FAULT_INST_REGIMMS_TEQI,
    FAULT_INST_REGIMMS_RESERVED4,
    FAULT_INST_REGIMMS_TNEI,
    FAULT_INST_REGIMMS_RESERVED5,
    FAULT_INST_REGIMMS_BLTZAL,
    FAULT_INST_REGIMMS_BGEZAL,
    FAULT_INST_REGIMMS_BLTZALL,
    FAULT_INST_REGIMMS_BGEZALL,
    FAULT_INST_REGIMMS_RESERVED6,
    FAULT_INST_REGIMMS_RESERVED7,
    FAULT_INST_REGIMMS_RESERVED8,
    FAULT_INST_REGIMMS_RESERVED9,
    FAULT_INST_REGIMMS_RESERVED10,
    FAULT_INST_REGIMMS_RESERVED11,
    FAULT_INST_REGIMMS_RESERVED12,
    FAULT_INST_REGIMMS_RESERVED13,
    FAULT_INST_REGIMMS_RESERVED14,
    FAULT_INST_REGIMMS_RESERVED15,
    FAULT_INST_REGIMMS_RESERVED16,
    FAULT_INST_REGIMMS_RESERVED17
};

enum FAULT_INST_COPZRS
{
    FAULT_INST_COPZRS_MF,
    FAULT_INST_COPZRS_DMF,
    FAULT_INST_COPZRS_CF,
    FAULT_INST_COPZRS_RESERVED0,
    FAULT_INST_COPZRS_MT,
    FAULT_INST_COPZRS_DMT,
    FAULT_INST_COPZRS_CT,
    FAULT_INST_COPZRS_RESERVED1,
    FAULT_INST_COPZRS_BC,
    FAULT_INST_COPZRS_RESERVED2,
    FAULT_INST_COPZRS_RESERVED3,
    FAULT_INST_COPZRS_RESERVED4,
    FAULT_INST_COPZRS_RESERVED5,
    FAULT_INST_COPZRS_RESERVED6,
    FAULT_INST_COPZRS_RESERVED7,
    FAULT_INST_COPZRS_RESERVED8
};

enum FAULT_INST_COPZRT
{
    FAULT_INST_COPZRT_BCF,
    FAULT_INST_COPZRT_BCT,
    FAULT_INST_COPZRT_BCFL,
    FAULT_INST_COPZRT_BCTL,
    FAULT_INST_COPZRT_RESERVED0,
    FAULT_INST_COPZRT_RESERVED1,
    FAULT_INST_COPZRT_RESERVED2,
    FAULT_INST_COPZRT_RESERVED3,
    FAULT_INST_COPZRT_RESERVED4,
    FAULT_INST_COPZRT_RESERVED5,
    FAULT_INST_COPZRT_RESERVED6,
    FAULT_INST_COPZRT_RESERVED7,
    FAULT_INST_COPZRT_RESERVED8,
    FAULT_INST_COPZRT_RESERVED9,
    FAULT_INST_COPZRT_RESERVED10,
    FAULT_INST_COPZRT_RESERVED11,
    FAULT_INST_COPZRT_RESERVED12,
    FAULT_INST_COPZRT_RESERVED13,    
    FAULT_INST_COPZRT_RESERVED14,    
    FAULT_INST_COPZRT_RESERVED15,    
    FAULT_INST_COPZRT_RESERVED16,    
    FAULT_INST_COPZRT_RESERVED17,    
    FAULT_INST_COPZRT_RESERVED18,    
    FAULT_INST_COPZRT_RESERVED19,    
    FAULT_INST_COPZRT_RESERVED20,    
    FAULT_INST_COPZRT_RESERVED21,    
    FAULT_INST_COPZRT_RESERVED22,    
    FAULT_INST_COPZRT_RESERVED23,    
    FAULT_INST_COPZRT_RESERVED24,    
    FAULT_INST_COPZRT_RESERVED25,    
    FAULT_INST_COPZRT_RESERVED26,    
    FAULT_INST_COPZRT_RESERVED27
};

enum FAULT_INST_CP0
{
    FAULT_INST_CP0_RESERVED0,
    FAULT_INST_CP0_TLBR,
    FAULT_INST_CP0_TLBWI,
    FAULT_INST_CP0_RESERVED1,
    FAULT_INST_CP0_RESERVED2,
    FAULT_INST_CP0_RESERVED3,
    FAULT_INST_CP0_TLBWR,
    FAULT_INST_CP0_RESERVED4,
    FAULT_INST_CP0_TLBP,
    FAULT_INST_CP0_RESERVED5,
    FAULT_INST_CP0_RESERVED6,
    FAULT_INST_CP0_RESERVED7,
    FAULT_INST_CP0_RESERVED8,
    FAULT_INST_CP0_RESERVED9,
    FAULT_INST_CP0_RESERVED10,
    FAULT_INST_CP0_RESERVED11,
    FAULT_INST_CP0_RESERVED12,
    FAULT_INST_CP0_RESERVED13,
    FAULT_INST_CP0_RESERVED14,
    FAULT_INST_CP0_RESERVED15,
    FAULT_INST_CP0_RESERVED16,
    FAULT_INST_CP0_RESERVED17,
    FAULT_INST_CP0_RESERVED18,
    FAULT_INST_CP0_RESERVED19,
    FAULT_INST_CP0_ERET,
    FAULT_INST_CP0_RESERVED20,
    FAULT_INST_CP0_RESERVED21,
    FAULT_INST_CP0_RESERVED22,
    FAULT_INST_CP0_RESERVED23,
    FAULT_INST_CP0_RESERVED24,
    FAULT_INST_CP0_RESERVED25,
    FAULT_INST_CP0_RESERVED26,
    FAULT_INST_CP0_RESERVED27,
    FAULT_INST_CP0_RESERVED28,
    FAULT_INST_CP0_RESERVED29,
    FAULT_INST_CP0_RESERVED30,
    FAULT_INST_CP0_RESERVED31,
    FAULT_INST_CP0_RESERVED32,
    FAULT_INST_CP0_RESERVED33,
    FAULT_INST_CP0_RESERVED34,
    FAULT_INST_CP0_RESERVED35,
    FAULT_INST_CP0_RESERVED36,
    FAULT_INST_CP0_RESERVED37,
    FAULT_INST_CP0_RESERVED38,
    FAULT_INST_CP0_RESERVED39,
    FAULT_INST_CP0_RESERVED40,
    FAULT_INST_CP0_RESERVED41,
    FAULT_INST_CP0_RESERVED42,
    FAULT_INST_CP0_RESERVED43,
    FAULT_INST_CP0_RESERVED44,
    FAULT_INST_CP0_RESERVED45,
    FAULT_INST_CP0_RESERVED46,
    FAULT_INST_CP0_RESERVED47,
    FAULT_INST_CP0_RESERVED48,
    FAULT_INST_CP0_RESERVED49,
    FAULT_INST_CP0_RESERVED50,
    FAULT_INST_CP0_RESERVED51,
    FAULT_INST_CP0_RESERVED52,
    FAULT_INST_CP0_RESERVED53,
    FAULT_INST_CP0_RESERVED54,
    FAULT_INST_CP0_RESERVED55,
    FAULT_INST_CP0_RESERVED56,
    FAULT_INST_CP0_RESERVED57
};

enum FAULT_CPU_REGS {
    FAULT_CPU_REG_Z,
    FAULT_CPU_REG_AT,
    FAULT_CPU_REG_V0,
    FAULT_CPU_REG_V1,
    FAULT_CPU_REG_A0,
    FAULT_CPU_REG_A1,
    FAULT_CPU_REG_A2,
    FAULT_CPU_REG_A3,
    FAULT_CPU_REG_T0,
    FAULT_CPU_REG_T1,
    FAULT_CPU_REG_T2,
    FAULT_CPU_REG_T3,
    FAULT_CPU_REG_T4,
    FAULT_CPU_REG_T5,
    FAULT_CPU_REG_T6,
    FAULT_CPU_REG_T7,
    FAULT_CPU_REG_S0,
    FAULT_CPU_REG_S1,
    FAULT_CPU_REG_S2,
    FAULT_CPU_REG_S3,
    FAULT_CPU_REG_S4,
    FAULT_CPU_REG_S5,
    FAULT_CPU_REG_S6,
    FAULT_CPU_REG_S7,
    FAULT_CPU_REG_T8,
    FAULT_CPU_REG_T9,
    FAULT_CPU_REG_K0,
    FAULT_CPU_REG_K1,
    FAULT_CPU_REG_GP,
    FAULT_CPU_REG_SP,
    FAULT_CPU_REG_FP,
    FAULT_CPU_REG_RA
}; 

struct FaultInstInfo
{
    u8 format_str;
};

struct FaultStackTraceInfo
{
    uintptr_t pc;
    uintptr_t sp;
    uintptr_t func;
}; 

// struct FaultDiasmInst
// {
//     u8 opcode;

//     union
//     {
//         struct
//         {

//         } special;

//         struct
//         {

//         } regimm;
//     };
// };

// #define FAULT_INST_INFO_DEF(class, type) {class, type}
#define FAULT_INST_INFO_DEF(format_str) {format_str}

typedef void (*FaultClientCallback)(void*, void*);

typedef struct FaultClient {
    /* 0x0 */ struct FaultClient* next;
              struct FaultClient *prev;
    /* 0x4 */ FaultClientCallback callback;
    /* 0x8 */ void* arg0;
    /* 0xC */ void* arg1;
} FaultClient; // size = 0x10


typedef uintptr_t (*FaultAddrConvClientCallback)(uintptr_t, void*);

typedef struct FaultAddrConvClient {
    /* 0x0 */ struct FaultAddrConvClient* next;
              struct FaultAddrConvClient* prev;
    /* 0x4 */ FaultAddrConvClientCallback callback;
    /* 0x8 */ void* arg;
} FaultAddrConvClient; // size = 0xC

typedef void(*FaultPadCallback)(Input* input);


// Initialization

void Fault_Init(void);

// Fatal Errors

void Fault_AddHungupAndCrashImpl(const char* exp1, const char* exp2);
void Fault_AddHungupAndCrash(const char* file, s32 line);
void Fault_AddHangupPrintfAndCrash(const char *fmt, ...);

// Client Registration

void Fault_AddClient(FaultClient* client, FaultClientCallback callback, void* arg0, void* arg1);
void Fault_RemoveClient(FaultClient* client);
void Fault_AddAddrConvClient(FaultAddrConvClient* client, FaultAddrConvClientCallback callback, void* arg);
void Fault_RemoveAddrConvClient(FaultAddrConvClient* client);

// For use in Fault Client callbacks

void Fault_WaitForInput(void);
void Fault_FillScreenBlack(void);
void Fault_SetFrameBuffer(void* fb, u16 w, u16 h);

void FaultDrawer_SetForeColor(u16 color);
void FaultDrawer_SetBackColor(u16 color);
void FaultDrawer_SetFontColor(u16 color);
void FaultDrawer_SetCharPad(s8 padW, s8 padH);
void FaultDrawer_SetCursor(s32 x, s32 y);
s32 FaultDrawer_VPrintf(const char* fmt, va_list ap);
s32 FaultDrawer_Printf(const char* fmt, ...);
void FaultDrawer_DrawText(s32 x, s32 y, const char* fmt, ...);


typedef struct FaultMgr {
    /* 0x000 */ OSThread thread;
    /* 0x1B0 */ STACK(stack, 0x600); // Seems leftover from an earlier version. The thread actually uses a stack of this size at 0x8009BE60
    /* 0x7B0 */ OSMesgQueue queue;
    /* 0x7C8 */ OSMesg msg[1];
    /* 0x7CC */ u8 exit;
    /* 0x7CD */ u8 msgId; // 1 - CPU Break; 2 - Fault; 3 - Unknown
    /* 0x7CE */ u8 faultHandlerEnabled;
    /* 0x7CF */ u8 autoScroll;
    /* 0x7D0 */ OSThread* faultedThread;
    /* 0x7D4 */ FaultPadCallback padCallback;
    /* 0x7D8 */ FaultClient* first_client;
                FaultClient *last_client; 
    /* 0x7DC */ FaultAddrConvClient* first_addr_conv_client;
                FaultAddrConvClient *last_addr_conv_client; 
    /* 0x7E0 */ UNK_TYPE1 unk_7E0[0x4];
    /* 0x7E4 */ Input inputs[MAXCONTROLLERS];
    /* 0x844 */ void* fb;
} FaultMgr; // size = 0x848

// TODO: Commented out to try to avoid bss reorder in fault.c
// extern FaultMgr gFaultMgr;

#endif
